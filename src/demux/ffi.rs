/* automatically generated by rust-bindgen */

#[repr(C)]
#[derive(Copy)]
pub struct Struct_winsize {
    pub ws_row: ::libc::c_ushort,
    pub ws_col: ::libc::c_ushort,
    pub ws_xpixel: ::libc::c_ushort,
    pub ws_ypixel: ::libc::c_ushort,
}
impl ::std::clone::Clone for Struct_winsize {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_winsize {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_termio {
    pub c_iflag: ::libc::c_ushort,
    pub c_oflag: ::libc::c_ushort,
    pub c_cflag: ::libc::c_ushort,
    pub c_lflag: ::libc::c_ushort,
    pub c_line: ::libc::c_uchar,
    pub c_cc: [::libc::c_uchar; 8usize],
}
impl ::std::clone::Clone for Struct_termio {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_termio {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __s8 = ::libc::c_char;
pub type __u8 = ::libc::c_uchar;
pub type __s16 = ::libc::c_short;
pub type __u16 = ::libc::c_ushort;
pub type __s32 = ::libc::c_int;
pub type __u32 = ::libc::c_uint;
pub type __s64 = ::libc::c_longlong;
pub type __u64 = ::libc::c_ulonglong;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed1 {
    pub fds_bits: [::libc::c_ulong; 16usize],
}
impl ::std::clone::Clone for Struct_Unnamed1 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __kernel_fd_set = Struct_Unnamed1;
pub type __kernel_sighandler_t =
    ::std::option::Option<extern "C" fn(arg1: ::libc::c_int) -> ()>;
pub type __kernel_key_t = ::libc::c_int;
pub type __kernel_mqd_t = ::libc::c_int;
pub type __kernel_old_uid_t = ::libc::c_ushort;
pub type __kernel_old_gid_t = ::libc::c_ushort;
pub type __kernel_old_dev_t = ::libc::c_ulong;
pub type __kernel_long_t = ::libc::c_long;
pub type __kernel_ulong_t = ::libc::c_ulong;
pub type __kernel_ino_t = __kernel_ulong_t;
pub type __kernel_mode_t = ::libc::c_uint;
pub type __kernel_pid_t = ::libc::c_int;
pub type __kernel_ipc_pid_t = ::libc::c_int;
pub type __kernel_uid_t = ::libc::c_uint;
pub type __kernel_gid_t = ::libc::c_uint;
pub type __kernel_suseconds_t = __kernel_long_t;
pub type __kernel_daddr_t = ::libc::c_int;
pub type __kernel_uid32_t = ::libc::c_uint;
pub type __kernel_gid32_t = ::libc::c_uint;
pub type __kernel_size_t = __kernel_ulong_t;
pub type __kernel_ssize_t = __kernel_long_t;
pub type __kernel_ptrdiff_t = __kernel_long_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed2 {
    pub val: [::libc::c_int; 2usize],
}
impl ::std::clone::Clone for Struct_Unnamed2 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __kernel_fsid_t = Struct_Unnamed2;
pub type __kernel_off_t = __kernel_long_t;
pub type __kernel_loff_t = ::libc::c_longlong;
pub type __kernel_time_t = __kernel_long_t;
pub type __kernel_clock_t = __kernel_long_t;
pub type __kernel_timer_t = ::libc::c_int;
pub type __kernel_clockid_t = ::libc::c_int;
pub type __kernel_caddr_t = *mut ::libc::c_char;
pub type __kernel_uid16_t = ::libc::c_ushort;
pub type __kernel_gid16_t = ::libc::c_ushort;
pub type __le16 = __u16;
pub type __be16 = __u16;
pub type __le32 = __u32;
pub type __be32 = __u32;
pub type __le64 = __u64;
pub type __be64 = __u64;
pub type __sum16 = __u16;
pub type __wsum = __u32;
pub type size_t = ::libc::c_ulong;
pub type __u_char = ::libc::c_uchar;
pub type __u_short = ::libc::c_ushort;
pub type __u_int = ::libc::c_uint;
pub type __u_long = ::libc::c_ulong;
pub type __int8_t = ::libc::c_char;
pub type __uint8_t = ::libc::c_uchar;
pub type __int16_t = ::libc::c_short;
pub type __uint16_t = ::libc::c_ushort;
pub type __int32_t = ::libc::c_int;
pub type __uint32_t = ::libc::c_uint;
pub type __int64_t = ::libc::c_long;
pub type __uint64_t = ::libc::c_ulong;
pub type __quad_t = ::libc::c_long;
pub type __u_quad_t = ::libc::c_ulong;
pub type __dev_t = ::libc::c_ulong;
pub type __uid_t = ::libc::c_uint;
pub type __gid_t = ::libc::c_uint;
pub type __ino_t = ::libc::c_ulong;
pub type __ino64_t = ::libc::c_ulong;
pub type __mode_t = ::libc::c_uint;
pub type __nlink_t = ::libc::c_ulong;
pub type __off_t = ::libc::c_long;
pub type __off64_t = ::libc::c_long;
pub type __pid_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed3 {
    pub __val: [::libc::c_int; 2usize],
}
impl ::std::clone::Clone for Struct_Unnamed3 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed3 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __fsid_t = Struct_Unnamed3;
pub type __clock_t = ::libc::c_long;
pub type __rlim_t = ::libc::c_ulong;
pub type __rlim64_t = ::libc::c_ulong;
pub type __id_t = ::libc::c_uint;
pub type __time_t = ::libc::c_long;
pub type __useconds_t = ::libc::c_uint;
pub type __suseconds_t = ::libc::c_long;
pub type __daddr_t = ::libc::c_int;
pub type __key_t = ::libc::c_int;
pub type __clockid_t = ::libc::c_int;
pub type __timer_t = *mut ::libc::c_void;
pub type __blksize_t = ::libc::c_long;
pub type __blkcnt_t = ::libc::c_long;
pub type __blkcnt64_t = ::libc::c_long;
pub type __fsblkcnt_t = ::libc::c_ulong;
pub type __fsblkcnt64_t = ::libc::c_ulong;
pub type __fsfilcnt_t = ::libc::c_ulong;
pub type __fsfilcnt64_t = ::libc::c_ulong;
pub type __fsword_t = ::libc::c_long;
pub type __ssize_t = ::libc::c_long;
pub type __syscall_slong_t = ::libc::c_long;
pub type __syscall_ulong_t = ::libc::c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::libc::c_char;
pub type __intptr_t = ::libc::c_long;
pub type __socklen_t = ::libc::c_uint;
pub type clock_t = __clock_t;
pub type time_t = __time_t;
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
impl ::std::clone::Clone for Struct_timespec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_timespec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_tm {
    pub tm_sec: ::libc::c_int,
    pub tm_min: ::libc::c_int,
    pub tm_hour: ::libc::c_int,
    pub tm_mday: ::libc::c_int,
    pub tm_mon: ::libc::c_int,
    pub tm_year: ::libc::c_int,
    pub tm_wday: ::libc::c_int,
    pub tm_yday: ::libc::c_int,
    pub tm_isdst: ::libc::c_int,
    pub tm_gmtoff: ::libc::c_long,
    pub tm_zone: *const ::libc::c_char,
}
impl ::std::clone::Clone for Struct_tm {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_tm {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_itimerspec {
    pub it_interval: Struct_timespec,
    pub it_value: Struct_timespec,
}
impl ::std::clone::Clone for Struct_itimerspec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_itimerspec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum Struct_sigevent { }
pub type pid_t = __pid_t;
pub enum Struct___locale_data { }
#[repr(C)]
#[derive(Copy)]
pub struct Struct___locale_struct {
    pub __locales: [*mut Struct___locale_data; 13usize],
    pub __ctype_b: *const ::libc::c_ushort,
    pub __ctype_tolower: *const ::libc::c_int,
    pub __ctype_toupper: *const ::libc::c_int,
    pub __names: [*const ::libc::c_char; 13usize],
}
impl ::std::clone::Clone for Struct___locale_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___locale_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __locale_t = *mut Struct___locale_struct;
pub type locale_t = __locale_t;
pub type Enum_Unnamed4 = ::libc::c_uint;
pub const DMX_OUT_DECODER: ::libc::c_uint = 0;
pub const DMX_OUT_TAP: ::libc::c_uint = 1;
pub const DMX_OUT_TS_TAP: ::libc::c_uint = 2;
pub const DMX_OUT_TSDEMUX_TAP: ::libc::c_uint = 3;
pub type dmx_output_t = Enum_Unnamed4;
pub type Enum_Unnamed5 = ::libc::c_uint;
pub const DMX_IN_FRONTEND: ::libc::c_uint = 0;
pub const DMX_IN_DVR: ::libc::c_uint = 1;
pub type dmx_input_t = Enum_Unnamed5;
pub type Enum_dmx_ts_pes = ::libc::c_uint;
pub const DMX_PES_AUDIO0: ::libc::c_uint = 0;
pub const DMX_PES_VIDEO0: ::libc::c_uint = 1;
pub const DMX_PES_TELETEXT0: ::libc::c_uint = 2;
pub const DMX_PES_SUBTITLE0: ::libc::c_uint = 3;
pub const DMX_PES_PCR0: ::libc::c_uint = 4;
pub const DMX_PES_AUDIO1: ::libc::c_uint = 5;
pub const DMX_PES_VIDEO1: ::libc::c_uint = 6;
pub const DMX_PES_TELETEXT1: ::libc::c_uint = 7;
pub const DMX_PES_SUBTITLE1: ::libc::c_uint = 8;
pub const DMX_PES_PCR1: ::libc::c_uint = 9;
pub const DMX_PES_AUDIO2: ::libc::c_uint = 10;
pub const DMX_PES_VIDEO2: ::libc::c_uint = 11;
pub const DMX_PES_TELETEXT2: ::libc::c_uint = 12;
pub const DMX_PES_SUBTITLE2: ::libc::c_uint = 13;
pub const DMX_PES_PCR2: ::libc::c_uint = 14;
pub const DMX_PES_AUDIO3: ::libc::c_uint = 15;
pub const DMX_PES_VIDEO3: ::libc::c_uint = 16;
pub const DMX_PES_TELETEXT3: ::libc::c_uint = 17;
pub const DMX_PES_SUBTITLE3: ::libc::c_uint = 18;
pub const DMX_PES_PCR3: ::libc::c_uint = 19;
pub const DMX_PES_OTHER: ::libc::c_uint = 20;
pub type dmx_pes_type_t = Enum_dmx_ts_pes;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_dmx_filter {
    pub filter: [__u8; 16usize],
    pub mask: [__u8; 16usize],
    pub mode: [__u8; 16usize],
}
impl ::std::clone::Clone for Struct_dmx_filter {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_dmx_filter {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type dmx_filter_t = Struct_dmx_filter;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_dmx_sct_filter_params {
    pub pid: __u16,
    pub filter: dmx_filter_t,
    pub timeout: __u32,
    pub flags: __u32,
}
impl ::std::clone::Clone for Struct_dmx_sct_filter_params {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_dmx_sct_filter_params {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_dmx_pes_filter_params {
    pub pid: __u16,
    pub input: dmx_input_t,
    pub output: dmx_output_t,
    pub pes_type: dmx_pes_type_t,
    pub flags: __u32,
}
impl ::std::clone::Clone for Struct_dmx_pes_filter_params {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_dmx_pes_filter_params {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_dmx_caps {
    pub caps: __u32,
    pub num_decoders: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_dmx_caps {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_dmx_caps {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type dmx_caps_t = Struct_dmx_caps;
pub type Enum_Unnamed6 = ::libc::c_uint;
pub const DMX_SOURCE_FRONT0: ::libc::c_uint = 0;
pub const DMX_SOURCE_FRONT1: ::libc::c_uint = 1;
pub const DMX_SOURCE_FRONT2: ::libc::c_uint = 2;
pub const DMX_SOURCE_FRONT3: ::libc::c_uint = 3;
pub const DMX_SOURCE_DVR0: ::libc::c_uint = 16;
pub const DMX_SOURCE_DVR1: ::libc::c_uint = 17;
pub const DMX_SOURCE_DVR2: ::libc::c_uint = 18;
pub const DMX_SOURCE_DVR3: ::libc::c_uint = 19;
pub type dmx_source_t = Enum_Unnamed6;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_dmx_stc {
    pub num: ::libc::c_uint,
    pub base: ::libc::c_uint,
    pub stc: __u64,
}
impl ::std::clone::Clone for Struct_dmx_stc {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_dmx_stc {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_fe_rust_bind_defines = ::libc::c_uint;
pub const DMX_FILTER_SIZE: ::libc::c_uint = 16;
pub const DMX_PES_AUDIO: ::libc::c_uint = 0;
pub const DMX_PES_VIDEO: ::libc::c_uint = 1;
pub const DMX_PES_TELETEXT: ::libc::c_uint = 2;
pub const DMX_PES_SUBTITLE: ::libc::c_uint = 3;
pub const DMX_PES_PCR: ::libc::c_uint = 4;
pub const DMX_CHECK_CRC: ::libc::c_uint = 1;
pub const DMX_ONESHOT: ::libc::c_uint = 2;
pub const DMX_IMMEDIATE_START: ::libc::c_uint = 4;
pub const DMX_KERNEL_CLIENT: ::libc::c_uint = 32768;
pub const DMX_START: ::libc::c_uint = 28457;
pub const DMX_STOP: ::libc::c_uint = 28458;
pub const DMX_SET_FILTER: ::libc::c_uint = 1077702443;
pub const DMX_SET_PES_FILTER: ::libc::c_uint = 1075081004;
pub const DMX_SET_BUFFER_SIZE: ::libc::c_uint = 28461;
pub const DMX_GET_PES_PIDS: ::libc::c_uint = -2146799825i32 as ::libc::c_uint;
pub const DMX_GET_CAPS: ::libc::c_uint = -2146930896i32 as ::libc::c_uint;
pub const DMX_SET_SOURCE: ::libc::c_uint = 1074032433;
pub const DMX_GET_STC: ::libc::c_uint = -1072664782i32 as ::libc::c_uint;
pub const DMX_ADD_PID: ::libc::c_uint = 1073901363;
pub const DMX_REMOVE_PID: ::libc::c_uint = 1073901364;
pub type fe_rust_bind_defines_t = Enum_fe_rust_bind_defines;
extern "C" {
    pub static mut __tzname: [*mut ::libc::c_char; 2usize];
    pub static mut __daylight: ::libc::c_int;
    pub static mut __timezone: ::libc::c_long;
    pub static mut tzname: [*mut ::libc::c_char; 2usize];
    pub static mut daylight: ::libc::c_int;
    pub static mut timezone: ::libc::c_long;
}
extern "C" {
    pub fn ioctl(__fd: ::libc::c_int, __request: ::libc::c_ulong, ...)
     -> ::libc::c_int;
    pub fn clock() -> clock_t;
    pub fn time(__timer: *mut time_t) -> time_t;
    pub fn difftime(__time1: time_t, __time0: time_t) -> ::libc::c_double;
    pub fn mktime(__tp: *mut Struct_tm) -> time_t;
    pub fn strftime(__s: *mut ::libc::c_char, __maxsize: size_t,
                    __format: *const ::libc::c_char, __tp: *const Struct_tm)
     -> size_t;
    pub fn strftime_l(__s: *mut ::libc::c_char, __maxsize: size_t,
                      __format: *const ::libc::c_char, __tp: *const Struct_tm,
                      __loc: __locale_t) -> size_t;
    pub fn gmtime(__timer: *const time_t) -> *mut Struct_tm;
    pub fn localtime(__timer: *const time_t) -> *mut Struct_tm;
    pub fn gmtime_r(__timer: *const time_t, __tp: *mut Struct_tm)
     -> *mut Struct_tm;
    pub fn localtime_r(__timer: *const time_t, __tp: *mut Struct_tm)
     -> *mut Struct_tm;
    pub fn asctime(__tp: *const Struct_tm) -> *mut ::libc::c_char;
    pub fn ctime(__timer: *const time_t) -> *mut ::libc::c_char;
    pub fn asctime_r(__tp: *const Struct_tm, __buf: *mut ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn ctime_r(__timer: *const time_t, __buf: *mut ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn tzset() -> ();
    pub fn stime(__when: *const time_t) -> ::libc::c_int;
    pub fn timegm(__tp: *mut Struct_tm) -> time_t;
    pub fn timelocal(__tp: *mut Struct_tm) -> time_t;
    pub fn dysize(__year: ::libc::c_int) -> ::libc::c_int;
    pub fn nanosleep(__requested_time: *const Struct_timespec,
                     __remaining: *mut Struct_timespec) -> ::libc::c_int;
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut Struct_timespec)
     -> ::libc::c_int;
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut Struct_timespec)
     -> ::libc::c_int;
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const Struct_timespec)
     -> ::libc::c_int;
    pub fn clock_nanosleep(__clock_id: clockid_t, __flags: ::libc::c_int,
                           __req: *const Struct_timespec,
                           __rem: *mut Struct_timespec) -> ::libc::c_int;
    pub fn clock_getcpuclockid(__pid: pid_t, __clock_id: *mut clockid_t)
     -> ::libc::c_int;
    pub fn timer_create(__clock_id: clockid_t, __evp: *mut Struct_sigevent,
                        __timerid: *mut timer_t) -> ::libc::c_int;
    pub fn timer_delete(__timerid: timer_t) -> ::libc::c_int;
    pub fn timer_settime(__timerid: timer_t, __flags: ::libc::c_int,
                         __value: *const Struct_itimerspec,
                         __ovalue: *mut Struct_itimerspec) -> ::libc::c_int;
    pub fn timer_gettime(__timerid: timer_t, __value: *mut Struct_itimerspec)
     -> ::libc::c_int;
    pub fn timer_getoverrun(__timerid: timer_t) -> ::libc::c_int;
}
